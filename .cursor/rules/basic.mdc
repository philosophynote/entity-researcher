---
description: 
globs: 
alwaysApply: true
---
# Entity Researcher Rule

## 役割

あなたは高度な問題解決能力を持つAIアシスタントです。
後に示す指示に従って、効率的かつ正確にタスクを遂行してください。

## このアプリケーションの概要

ユーザーが入力した文章に応じて
関連する技術記事を表示するアプリケーションです

生成AI検索によるLLMエージェントを活用して
構築します。

## 主な技術スタック
- TypeScript
- React(v19)
- Nextjs(v15)
- Mastra
- AI SDK
- Tailwind
 - shadcn/ui
- Node.js(v22)
 - パッケージマネージャーは`npm`(10.9.0)  

## 機能要件
- フロントエンド
 - 自由入力形式で企業名を入力できる
 - 入力後して送信ボタンをクリックするとバックエンドに入力内容が送信される
 - 企業候補から調べたい企業を選択すると企業情報収集を実施する 
 - 企業情報をテーブル形式で表示して下さい
  - テーブル形式では|項目名|内容|情報源URL|で表示して下さい
- バックエンド
 - Next.js API routeで入力情報を受け取り、MastraのAIエージェントを利用してWeb検索・情報収集
 - 型定義を実施して取得データのバリデーションも行います
 - 企業特定の方法
   - フロントエンドで入力された情報から検索クエリを作成する
   - 検索クエリをbrave searchのAPI経由でエンドポイントにアクセスする
   - 企業候補の法人番号と企業名と企業所在地を返却する
 - 企業情報収集
   - Perplexityを利用して次の情報を収集する
    - コーポレートURL
    - 企業が提供する商品/サービスのLP(Landing Page) のURL
    - 業種(`src/mastra/jis_industry_classification.yaml`の`subcategories`から必ず選択して下さい)
    - 電話番号
    - 従業員数
    - 設立年月日
    - 企業概要（100文字程度）
   - Playwright経由でブラウザ操作して次の情報を収集する
    - 社会保険加入状況及び被保険者人数
    - 参照HP→https://www2.nenkin.go.jp/do/search_section/ 

     
## ディレクトリ構成
- App Router を採用し、`src/app/**` 配下に `layout.tsx, page.tsx` を配置する
- 共有 UI は `src/components/**`、ユーティリティは `src/lib/**`、API ルートは `src/app/api/**`
- `src/components/ui`には`shadcn/ui`のコンポーネントを格納
- `src/mastra`にはmastraのコードを格納

## ツール
- BraveSearch MCPサーバー操作
- Perplexity MCPサーバー操作
- Playwright MCPサーバー操作

## 実装時の注意点
- 常に既存コードの設計や記法を参考にしてください。
- TypeScriptにおいては、any型の使用は避けてください。
- クラスのmain関数が長くなる場合、適切な粒度でメソッドを分割してください。
- 書籍「リーダブルコード」のようなベストプラクティスを常に適用してください。
- コードの意図・背景などのコメントを各行に積極的に入れてください。また関数にはJSDocを入れることが推奨されます。
- API Route/Action では **Zod** で入力を検証し、推論型をそのまま返却して下さい

## 実施時のお願い

まず、このファイルを参照したら、「ルールを参照して作業開始します」と出力してください。

---

それでは、指示に従ってタスクを遂行してください。

<指示>
{{instructions}}
</指示>