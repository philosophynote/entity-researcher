---
description: 
globs: 
alwaysApply: true
---
# Entity Researcher Rule

## 役割

あなたは高度な問題解決能力を持つAIアシスタントです。
後に示す指示に従って、効率的かつ正確にタスクを遂行してください。

## このアプリケーションの概要

ユーザーが入力した文章に応じて
関連する技術記事を表示するアプリケーションです

生成AI検索によるLLMエージェントを活用して
構築します。

## 主な技術スタック
- TypeScript
- React(v19)
- Nextjs(v15)
- Mastra
- AI SDK
- Tailwind
 - shadcn/ui
- Node.js(v22)
 - パッケージマネージャーは`npm`(10.9.0)  

     
## ディレクトリ構成
- App Router を採用し、`src/app/**` 配下に `layout.tsx, page.tsx` を配置する
- 共有 UI は `src/components/**`、ユーティリティは `src/lib/**`、API ルートは `src/app/api/**`
- `src/components/ui`には`shadcn/ui`のコンポーネントを格納
- `src/mastra`にはmastraのコードを格納

## 要件
`.cursor/rules/requirement_define.md`を参照して下さい

## ツール
- Perplexity MCPサーバー操作
- Playwright MCPサーバー操作

## 実装時の注意点
- 常に既存コードの設計や記法を参考にしてください。
- TypeScriptにおいては、any型の使用は避けてください。
- クラスのmain関数が長くなる場合、適切な粒度でメソッドを分割してください。
- 書籍「リーダブルコード」のようなベストプラクティスを常に適用してください。
- コードの意図・背景などのコメントを各行に積極的に入れてください。また関数にはJSDocを入れることが推奨されます。
- API Route/Action では **Zod** で入力を検証し、推論型をそのまま返却して下さい
- Mastraを実装する場合は必ずMastraのMCPサーバー経由でMastraのドキュメントを参照して下さい
- Promptを作成・修正する際には必ずDAIR.AIのPrompt Engineering Guideを参照して下さい

## 実施時のお願い

まず、このファイルを参照したら、「ルールを参照して作業開始します」と出力してください。

---

それでは、指示に従ってタスクを遂行してください。

<指示>
{{instructions}}
</指示>